Всё что надо это
1. распокавать все в указанную папку 
dpkg-deb -R nt-pipe_1.6.8-b15_focal_amd64.deb /home/e.sermyagin/nt-pipe/2/nt-pipe_1.6.8-b11_focal_amd64
2. поменять файл ntpipe-broker.conf
    так же изменить версию пакета в ~/nt-pipe/2/nt-pipe_1.6.8-b11_focal_amd64/DEBIAN/control 
3.dpkg-deb --build <directory>
directory - положить всё в директорию с названием <name>=nt-pipe_1.6.8-b11_focal_amd64





=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Основное отличие между "aptly repo create" и "aptly repo add" заключается в том, что первая команда создает новый репозиторий, а вторая добавляет пакеты в уже существующий репозиторий.

Команда              используется для создания нового репозитория в Aptly. При использовании этой команды вы указываете имя нового репозитория и его описание. После создания репозитория вы можете добавлять в него пакеты с помощью команды "aptly repo add".
"aptly repo create" 

Команда             используется для добавления пакетов в существующий репозиторий в Aptly. При использовании этой команды вы указываете имя репозитория, в который нужно добавить пакеты, и путь к файлам пакетов. Пакеты могут быть добавлены как из локальной файловой системы, так и из удаленных репозиториев.
 "aptly repo add" 

	Для просмотра всех существующих баз в aptly можно использовать команду. Она выведет список всех созданных репозиториев (баз) в aptly. 
aptly repo list

	Для просмотра списка пакетов в репозитории aptly можно использовать команду. Она выведет информацию о репозитории, включая список всех пакетов, которые находятся в этом репозитории.
aptly repo show <имя репозитория>

	Показывает какие пакеты есть в конкретном локальном репо 
aptly repo show -with-packages 18.04-stable

	Если вы хотите получить более подробную информацию о конкретном пакете, вы можете использовать команду. Она выведет информацию о пакете, включая его имя, версию, описание, зависимости и т.д.
aptly package show -with-references nt-pipe_1.6.8-b15_amd64

-with-files: отобразить список файлов пакетов в пуле пакетов
-with-references: показать список зеркал, снимков и локальных репозиториев, которые ссылаются на этот пакет

	Для поиска пакетов во всех репозиториях aptly. Она выведет список всех пакетов, которые содержат указанное имя в своем имени или описании.
aptly search <имя пакета> 

Например, чтобы найти пакет с именем "nginx" во всех репозиториях aptly, нужно выполнить следующую команду:
aptly search nginx

Эта команда выведет список всех пакетов, которые содержат слово "nginx" в своем имени или описании, во всех репозиториях aptly. Если вы знаете, что искомый пакет находится только в определенном репозитории, вы можете указать его имя в команде aptly search. Например:
aptly package search -repo=18.04-custom-dev nanoswitch

просмотр зеркал 
 aptly mirror list

показывает снапшоты
 aptly snapshot list
 
 показывает какие пакеты есть в снашотах
aptly snapshot show -with-packages  18.04-stable-dev-2023-07-01 | grep nt-pipe


aptly snapshot show -with-packages  18.04-stable-dev-2023-11-14 | grep nt-io | grep 2.1.8-b1
  nt-io-core-avx-i_2.1.8-b1_amd64
  nt-io-core-avx-i-dbgsym_2.1.8-b1_amd64
  nt-io-corei7_2.1.8-b1_amd64
  nt-io-corei7-dbgsym_2.1.8-b1_amd64

список опубликованых репо
aptly publish list 

удаляет все пакеты ntdevel2 из локального репо 18.04-stable
aptly repo remove 18.04-stable ntdevel2


=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
что делаем для замены пакета в какой то одной версии репо

I.
добавил в эти локал репо пакет nt-pipe_1.6.8-b15
aptly repo add 20.04-stable-dev /home/e.sermyagin/pakets/ntio/*_focal*
aptly repo add 18.04-stable-dev /home/e.sermyagin/dpdk-20-corei7_20.11~-b15_18.04_amd64.deb
aptly repo add 18.04-stable-dev /nt-repo/nt-repo-dev/pool/stable/d/dpdk-20-4.15.0-76-generic-modules/dpdk-20-4.15.0-76-generic-modules_20.11.1-b15_18.04_amd64.deb

II.
создал снапшот локал репо для стейбл версии 18 И 20 UBUNTU
aptly snapshot create 18.04-stable-dev-2023-07-17 from repo 18.04-stable-dev
aptly snapshot create 20.04-stable-dev-2023-07-17 from repo 20.04-stable-dev

 20.04-stable-dev-2023-11-02 
 18.04-stable-dev-2023-11-02 


III.
делаю пул 
1
aptly snapshot pull -architectures=amd64,arm64,armhf -no-remove 18.04-stable-dev-2023-07-01 18.04-stable-dev-2023-07-13 18.04-stable-dev-2023-07-01.p0 nt-pipe_1.6.8-b15_amd64
aptly snapshot pull -architectures=amd64,arm64,armhf -no-remove 20.04-stable-dev-2023-07-01 20.04-stable-dev-2023-07-13 20.04-stable-dev-2023-07-01.p0 nt-pipe_1.6.8-b15_amd64
2
aptly snapshot pull -architectures=amd64,arm64,armhf -no-remove 18.04-stable-dev-2023-07-01.p0 18.04-stable-dev-2023-07-13 18.04-stable-dev-2023-07-01.p1 dpdk-20-core-avx-i_20.11.1-b15_amd64
aptly snapshot pull -architectures=amd64,arm64,armhf -no-remove 20.04-stable-dev-2023-07-01.p0 20.04-stable-dev-2023-07-13 20.04-stable-dev-2023-07-01.p1 dpdk-20-core-avx-i_20.11.1-b15_amd64

3
aptly snapshot pull -architectures=amd64,arm64,armhf -no-remove 18.04-stable-dev-2023-07-01.p1 18.04-stable-dev-2023-07-13 18.04-stable-dev-2023-07-01.p2 dpdk-20-4.15.0-76-generic-modules_20.11.1-b15_amd64

III.I
aptly snapshot show -with-packages 18.04-stable-dev-2023-07-01.p5 | grep nt-io-core-avx-i
aptly snapshot show -with-packages 20.04-stable-dev-2023-07-01.p1 | grep nt-pipe
aptly snapshot show -with-packages 18.04-stable-dev-2023-07-01.p0 | grep dpdk-20-core-avx-i
aptly snapshot show -with-packages 18.04-stable-dev-2023-07-01 | grep dpdk-20-4.15.0-76

III.II
показывает разницу в снапшотах
aptly snapshot diff 18.04-stable-dev-2023-07-01 18.04-stable-dev-2023-07-01.p5
  Arch   | Package                                  | Version in A                             | Version in B
+ amd64  | dpdk-20-4.15.0-76-generic-modules        | -                                        | 20.11.1-b15                             
+ amd64  | dpdk-20-core-avx-i                       | -                                        | 20.11.1-b15                             
+ amd64  | dpdk-20-corei7                           | -                                        | 20.11.1-b15                             
+ amd64  | nt-io-core-avx-i                         | -                                        | 2.1.5-b16                               
+ amd64  | nt-io-corei7                             | -                                        | 2.1.5-b16                               
+ amd64  | nt-pipe                                  | -                                        | 1.6.8-b15   

IV.
снапшот 18.04-stable-dev-2023-07-01 для 18

aptly publish switch -architectures=amd64,arm64,armhf -component="stable" bionic nt-repo 18.04-stable-dev-2023-07-01.p3

потом заменил используемый снапшот 20.04-stable-dev-2023-07-01 для 20
aptly publish switch -architectures=amd64,arm64,armhf -component="stable" focal nt-repo 20.04-stable-dev-2023-07-01.p1


aptly publish switch -architectures=amd64,arm64,armhf -component="stable" bionic nt-repo-stable 18.04-stable-dev-2023-07-01
aptly publish switch -architectures=amd64,arm64,armhf -component="stable" focal nt-repo 20.04-stable-dev-2023-07-01


после этого удалось поставить пакет nt-pipe=1.6.8-b15




исключение пакета из snapshot 
aptly snapshot filter

aptly snapshot filter 18.04-testing-dev-2023-06-01 18.04-testing-dev-2023-06-01-b1 '!Name (gtp-balancer0_2.14.0-1670945147-755f9986-testing_amd64)'
=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

как добавить пакет 
aptly repo remove 18.04-stable-dev "nt-pipe (=1.6.8-b15)"
aptly publish --force-overwrite update bionic nt-repo-dev
aptly repo add 18.04-stable-dev /home/apshen/nt-pipe_1.6.8-b15_bionic_amd64.deb
aptly publish --force-overwrite update bionic nt-repo-dev
aptly publish --force-overwrite update focal nt-repo-dev

как удалить пакет из базы 18.04-cus-dev
aptly repo list
List of local repos:
 * [18.04-cus-dev] (packages: 26)
 
Для удаления пакета из репозитория aptly можно использовать команду aptly repo remove <имя репозитория> <имя пакета>. В вашем случае, чтобы удалить пакет из репозитория 18.04-cus-dev, нужно выполнить следующую команду:

aptly repo remove 18.04-cus-dev <имя пакета>

Замените <имя пакета> на имя пакета, который вы хотите удалить из репозитория. После выполнения этой команды пакет будет удален из репозитория 18.04-cus-dev. 

Обратите внимание, что удаление пакета из репозитория не удаляет сам пакет из файловой системы. Если вы хотите удалить пакет полностью, вам нужно будет удалить его файлы вручную.


=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
aptly publish update 18.04-custom-dev
RROR: unable to update: published repo with storage:prefix/distribution ./18.04-custom-dev not found

Ошибка указывает на то, что опубликованный репозиторий с именем 18.04-custom-dev не найден в Aptly. Вы можете проверить список опубликованных репозиториев в Aptly, используя следующую команду:

aptly publish list


Если репозиторий не указан в списке, это означает, что он еще не был опубликован. Вы можете опубликовать репозиторий в Aptly, используя следующую команду:

aptly publish repo <repository-name> <distribution> <component>


Замените <repository-name> на имя репозитория, который вы хотите опубликовать, <distribution> на имя дистрибутива (например, bionic) и <component> на имя компонента (например, main). После того, как репозиторий будет опубликован, вы можете обновить его, используя команду aptly publish update.

=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Чтобы выполнить aptly publish update для репозитория repo-dev/bionic, вы можете использовать следующую команду:

aptly publish update bionic repo-dev

что бы выполнить обнавление для репозитория nt-repo-dev/bionic

  * nt-repo-dev/bionic (origin: NT, label: NT Ubuntu repository) [amd64, arm64, armhf] publishes {custom: [18.04-custom-dev]}, {stable: [18.04-stable-dev]}, {testing: [18.04-testing-dev]}, {unstable: [18.04-unstable-dev]}

 aptly publish update bionic nt-repo-dev




В Aptly регулярные выражения используются для поиска пакетов в репозиториях. Вы можете использовать регулярные выражения для более точного поиска пакетов по имени, версии, описанию и другим параметрам.

Для использования регулярных выражений в Aptly вы можете использовать специальные символы, такие как ^ для обозначения начала строки, $ для обозначения конца строки, . для обозначения любого символа и * для обозначения любого количества символов.

Например, чтобы найти все пакеты, начинающиеся с "nginx", вы можете использовать следующее регулярное выражение:

^nginx


А чтобы найти все пакеты, заканчивающиеся на "dev", вы можете использовать следующее регулярное выражение:

dev$


Кроме того, вы можете использовать другие операторы и символы для более сложных выражений. Например, | используется для обозначения "или", [ ] используется для обозначения диапазона символов, а { } используется для обозначения количества повторений.

Например, чтобы найти все пакеты, содержащие слово "nginx" или "apache" в имени или описании, вы можете использовать следующее регулярное выражение:

(nginx|apache)


Или чтобы найти все пакеты, содержащие цифры в версии, вы можете использовать следующее регулярное выражение:

[0-9]+

Это найдет все пакеты, содержащие одну или более цифр в версии.




=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=



=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

repo-create.sh

aptly repo create используется для создания нового репозитория в Aptly. При использовании этой команды вы указываете имя нового репозитория и его описание.
После создания репозитория вы можете добавлять в него пакеты с помощью команды "aptly repo add".
Этот скрипт создает репозитории в Aptly для каждой комбинации дистрибутива и компонента, используя заданные архитектуры.
$DISTS и $COMPONENTS - это переменные, которые содержат список дистрибутивов и компонентов соответственно. 
for dist in $DISTS; do - это цикл for, который перебирает каждый дистрибутив в списке $DISTS. 
for component in $COMPONENTS; do - это вложенный цикл for, который перебирает каждый компонент в списке $COMPONENTS. 
aptly repo create - это команда, которая создает новый репозиторий в Aptly. 
-architectures="$ARCH_CSLIST" - это опция, которая задает список архитектур для создаваемого репозитория. $ARCH_CSLIST - это переменная, которая содержит список архитектур. 
-distribution="$dist" - это опция, которая задает дистрибутив для создаваемого репозитория. $dist - это переменная, которая содержит текущий дистрибутив из списка $DISTS. 
-component="$component" - это опция, которая задает компонент для создаваемого репозитория. $component - это переменная, которая содержит текущий компонент из списка $COMPONENTS. 
"$dist-$component" - это имя, которое будет присвоено создаваемому репозиторию. Оно состоит из имени дистрибутива и имени компонента, разделенных дефисом. 
Таким образом, этот скрипт создает репозитории в Aptly для каждой комбинации дистрибутива и компонента, используя заданные архитектуры.

=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
repo-add.sh

Этот скрипт выполняет следующие действия:

1. Проверяет, был ли передан аргумент командной строки <DEB SEARCH PATH>. Если аргумент не был передан, выводит сообщение об использовании скрипта и завершает работу.
2. Загружает файл repo-definitions.sh, который содержит определения переменных $DISTS и $COMPONENTS.
3. Переходит в директорию $DEB_SEARCH_PATH.
4. Итерируется по списку дистрибутивов $DISTS.
5. Для каждого дистрибутива итерируется по списку компонентов $COMPONENTS.
6. Формируется путь к директории с пакетами для данного дистрибутива и компонента.
7. Если директория существует, выводится на экран команда aptly repo add, которая добавляет пакеты из директории в репозиторий с именем $dist-$component. Параметр -remove-files указывает на необходимость удаления пакетов из директории после добавления в репозиторий.
8. После добавления пакетов в репозиторий, директория с пакетами удаляется с помощью команды rmdir -p.
9. После завершения итерации по компонентам, скрипт переходит на уровень выше.
10. Директория $DEB_SEARCH_PATH удаляется с помощью команды rmdir.

Таким образом, скрипт позволяет автоматизировать процесс добавления пакетов в репозиторий Aptly из заданной директории.
=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
repo-drop.sh

Этот скрипт на языке bash предназначен для добавления пакетов Debian в репозиторий Aptly. 
Первая строка определяет переменную DEB_SEARCH_PATH и присваивает ей значение первого аргумента командной строки ($1). 
Затем скрипт проверяет, был ли передан аргумент командной строки. Если аргумент не был передан, то выводится сообщение об использовании скрипта и скрипт завершает свою работу с кодом выхода 1. 
Далее скрипт подключает файл "repo-definitions.sh", который содержит определения переменных DISTS и COMPONENTS. 
Затем скрипт переходит в каталог, указанный в переменной DEB_SEARCH_PATH, и начинает итерироваться по всем дистрибутивам и компонентам, указанным в переменных DISTS и COMPONENTS. 
Для каждой комбинации дистрибутива и компонента скрипт проверяет, сущестКоманда "aptly snapshot drop" имеет следующие ограничения:

1. Команда удаляет все связанные снимки и пакеты, поэтому необходимо быть осторожным при ее использовании.

2. Если снимок используется в публикации, то его нельзя удалить. Сначала необходимо удалить публикацию, которая использует этот снимок.

3. Если снимок используется в другом снимке, то его нельзя удалить. Сначала необходимо удалить снимок, который использует этот снимок.

4. Если снимок используется в репозитории, то его нельзя удалить. Сначала необходимо удалить репозиторий, который использует этот снимок.

5. Если снимок был подписан, то его нельзя удалить. Сначала необходимо удалить подпись снимка.

6. Если снимок был зафиксирован, то его нельзя удалить. Сначала необходимо разблокировать снимок.

7. Если снимок был создан с помощью команды "aptly snapshot merge", то его нельзя удалить. Сначала необходимо удалить снимок, который был создан с помощью этой команды.

8. Если снимок был создан с помощью команды "aptly snapshot pull", то его нельзя удалить. Сначала необходимо удалить снимок, который был использован для создания этого снимка.

9. Если снимок был создан с помощью команды "aptly snapshot create", то его можно удалить в любое время.вует ли каталог с соответствующим именем. Если каталог существует, то скрипт добавляет его содержимое в репозиторий Aptly с помощью команды "aptly repo add -remove-files". Затем скрипт удаляет каталог с помощью команды "rmdir -p". 
После того, как скрипт обработал все дистрибутивы и компоненты, он возвращает текущий каталог и удаляет каталог, указанный в переменной DEB_SEARCH_PATH.

=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

repo-publish.sh
Этот скрипт выполняет следующие действия:

1. Итерируется по списку дистрибутивов, заданных в переменной $DISTS.
2. Для каждого дистрибутива вызывается функция list_component_repos, которая возвращает список репозиториев для данного дистрибутива.
3. Полученный список репозиториев сохраняется в переменную $repos.
4. Выводится на экран содержимое переменной $repos.
5. Формируется и выводится на экран команда aptly publish repo, которая будет использоваться для публикации репозиториев.
6. Выполняется команда aptly publish repo, которая публикует репозитории с заданными параметрами.

Таким образом, скрипт позволяет автоматизировать процесс публикации репозиториев для заданных дистрибутивов и компонентов.


./repo-publish.sh
aptly publish repo -architectures=amd64,arm64,armhf -component=custom,unstable,testing,stable 18.04-custom 18.04-unstable 18.04-testing 18.04-stable ntrepo-dev
ERROR: unable to initialize GPG signer: looks like there are no keys in gpg, please create one (official manual: http://www.gnupg.org/gph/en/manual.html)
 
создаем ключи, и если ошибка то выполянем команды ниже 

gpg --export-secret-keys --armor > secret.asc
gpg1 --import < secret.asc

=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
repo-update.sh











=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
snapshot-create.sh

Этот код является bash-скриптом, который создает снимок репозитория Aptly для каждого дистрибутива из списка $DISTS.

Первая строка скрипта использует команду source для загрузки файла repo-definitions.sh, который содержит определения переменных, используемых в скрипте.

Затем скрипт определяет переменную SNAPSHOT_NAME, которая будет использоваться для имени снимка. Если переменная не была передана в качестве аргумента командной строки, то ей присваивается текущая дата и время в формате ГГГГ-ММ-ДД-ЧЧММ.

Далее, в цикле for, скрипт перебирает каждый дистрибутив из списка $DISTS и создает снимок репозитория Aptly для каждого дистрибутива. 

Команда aptly snapshot create создает снимок репозитория Aptly с именем, состоящим из имени дистрибутива и переменной SNAPSHOT_NAME. 

Таким образом, в каждой итерации цикла будет создан снимок репозитория Aptly для каждого дистрибутива из списка $DISTS с уникальным именем, содержащим текущую дату и время.
=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
snapshot-publish.sh 


Команда "aptly publish snapshot" используется для публикации снимка (snapshot) в репозитории Aptly. Эта команда создает новую публикацию, которая содержит все пакеты из указанного снимка.

Команда "aptly publish repo" используется для публикации репозитория Aptly. Эта команда создает новую публикацию, которая содержит все пакеты из указанного репозитория.

Таким образом, основное отличие между этими командами заключается в том, что "aptly publish snapshot" публикует только один снимок, а "aptly publish repo" публикует весь репозиторий. Кроме того, при использовании "aptly publish snapshot" можно указать только один снимок, а при использовании "aptly publish repo" можно указать несколько репозиториев.

В обоих случаях создается новая публикация, которая может быть использована для установки пакетов на других компьютерах. Однако при использовании "aptly publish repo" можно указать дополнительные параметры, такие как архитектура, компоненты и дистрибутивы, что позволяет более гибко настроить публикацию.
=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
snapshot-pull.sh
Этот скрипт позволяет обновлять локальный снимок (snapshot) пакетами из удаленного репозитория, это может быть полезно, например, при обновлении пакетов в локальном репозитории. Так же этот скрипт, выполяет проверку имен снимков (snapshot), на соответствие шаблону  $SNAPSHOT_NAME =~ (.*)-p([0-9]+)$ , если имя снимка (snapshot), соответвует шаблону, то скрипт создает нове имя, добавляя оснвоному снимку -p и увеличивая значение на 1. Если имя снимка не соответствует шаблону, то скрипт создает новое имя , добавляя к исходному имени суффикс -p1. 


=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
snapshot-drop.sh


Команда "aptly snapshot drop" имеет следующие ограничения:

1. Команда удаляет все связанные снимки и пакеты, поэтому необходимо быть осторожным при ее использовании.

2. Если снимок используется в публикации, то его нельзя удалить. Сначала необходимо удалить публикацию, которая использует этот снимок.

3. Если снимок используется в другом снимке, то его нельзя удалить. Сначала необходимо удалить снимок, который использует этот снимок.

4. Если снимок используется в репозитории, то его нельзя удалить. Сначала необходимо удалить репозиторий, который использует этот снимок.

5. Если снимок был подписан, то его нельзя удалить. Сначала необходимо удалить подпись снимка.

6. Если снимок был зафиксирован, то его нельзя удалить. Сначала необходимо разблокировать снимок.

7. Если снимок был создан с помощью команды "aptly snapshot merge", то его нельзя удалить. Сначала необходимо удалить снимок, который был создан с помощью этой команды.

8. Если снимок был создан с помощью команды "aptly snapshot pull", то его нельзя удалить. Сначала необходимо удалить снимок, который был использован для создания этого снимка.

9. Если снимок был создан с помощью команды "aptly snapshot create", то его можно удалить в любое время.


удаление опубликованых репо

esermyagin@g10:~/Desktop/123/script/aptly/1$ aptly publish list
Published repositories:
  * ntrepo-dev/18.04 [amd64, arm64, armhf] publishes {custom: [18.04-custom]}, {stable: [18.04-stable]}, {testing: [18.04-testing]}, {unstable: [18.04-unstable]}
  * ntrepo-dev/18.04/20.04 [amd64, arm64, armhf] publishes {stable: [20.04-2023-06-07-1130]: Snapshot from local repo [20.04-stable]}
  * ntrepo-dev/18.04/22.04 [amd64, arm64, armhf] publishes {stable: [22.04-2023-06-07-1130]: Snapshot from local repo [22.04-stable]}
  * ntrepo-dev/18.04/all [amd64, arm64, armhf] publishes {stable: [all-2023-06-07-1130]: Snapshot from local repo [all-stable]}
  * ntrepo-dev/20.04 [amd64, arm64, armhf] publishes {custom: [20.04-custom]}, {stable: [20.04-stable]}, {testing: [20.04-testing]}, {unstable: [20.04-unstable]}
  * ntrepo-dev/22.04 [amd64, arm64, armhf] publishes {custom: [22.04-custom]}, {stable: [22.04-stable]}, {testing: [22.04-testing]}, {unstable: [22.04-unstable]}
  * ntrepo-dev/all [amd64, arm64, armhf] publishes {custom: [all-custom]}, {stable: [all-stable]}, {testing: [all-testing]}, {unstable: [all-unstable]}
esermyagin@g10:~/Desktop/123/script/aptly/1$ aptly publish drop 20.04 ntrepo-dev/18.04/
Removing /home/esermyagin/.aptly/public/ntrepo-dev/18.04/dists/20.04...
Cleaning up prefix "ntrepo-dev/18.04" components stable...

Published repository has been removed successfully.


esermyagin@g10:~/Desktop/123/script/aptly/1$ aptly publish drop all ntrepo-dev/18.04/
Removing /home/esermyagin/.aptly/public/ntrepo-dev/18.04/dists...
Removing /home/esermyagin/.aptly/public/ntrepo-dev/18.04/pool...

Published repository has been removed successfully.

=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

snapshot-switch.sh  
Команда aptly publish switch используется для переключения между двумя ранее опубликованными репозиториями в Aptly. В данном случае, команда переключает репозиторий с именем ${dist}-${SNAPSHOT_DATE} на новый репозиторий, который будет создан в результате выполнения предыдущих команд.

Аргументы команды:
- -architectures="$ARCHS_CSLIST" - список архитектур, которые будут использоваться в новом репозитории.
- -component="stable" - компонент, который будет использоваться в новом репозитории.
- $dist - дистрибутив, для которого будет создан новый репозиторий.
- $REPO_PREFIX - префикс имени репозитория.
- ${dist}-${SNAPSHOT_DATE} - имя репозитория, который будет переключен на новый репозиторий.

Таким образом, команда создаст новый репозиторий с именем ${dist}-${SNAPSHOT_DATE}, используя указанные архитектуры и компонент, а затем переключит репозиторий с этим именем на новый репозиторий

Команда aptly publish switch используется для переключения между двумя ранее опубликованными репозиториями в Aptly. Это может быть полезно, если вы хотите обновить репозиторий на основе нового снимка, но не хотите изменять URL-адрес, по которому он доступен.

Для использования aptly publish switch вам нужно сначала опубликовать два репозитория с разными именами, но с тем же URL-адресом. Затем вы можете использовать команду aptly publish switch для переключения между ними.

Вот пример использования aptly publish switch:

aptly publish switch -distribution=stable myrepo myrepo-staging


Эта команда переключит репозиторий myrepo на репозиторий myrepo-staging для дистрибутива stable. После этого все запросы на получение пакетов будут перенаправлены на myrepo-staging.

Обратите внимание, что при использовании aptly publish switch не происходит никакого копирования пакетов или метаданных между репозиториями. Вместо этого просто меняется символическая ссылка на текущий репозиторий.

Для выполнения команды aptly publish switch необходимо выполнить следующие обязательные действия:

1. Опубликовать два репозитория с разными именами, но с тем же URL-адресом.
2. Убедиться, что оба репозитория имеют одинаковые дистрибутивы и компоненты.
3. Убедиться, что оба репозитория были подписаны с использованием одного и того же GPG-ключа.

Ограничения на выполнение команды aptly publish switch:

1. Команда aptly publish switch не может использоваться для переключения между репозиториями с разными URL-адресами.
2. Команда aptly publish switch не может использоваться для переключения между репозиториями с разными дистрибутивами или компонентами.
3. Команда aptly publish switch не может использоваться для переключения между репозиториями, которые были подписаны с использованием разных GPG-ключей.

Обратите внимание, что при выполнении команды aptly publish switch не происходит копирование пакетов или метаданных между репозиториями. Вместо этого просто меняется символическая ссылка на текущий репозиторий.

Для проверки URL-адресов репозиториев в Aptly можно использовать команду aptly repo show. Эта команда показывает информацию о репозитории, включая его URL-адрес.

Чтобы проверить URL-адрес репозитория, выполните следующие шаги:

1. Откройте терминал и выполните команду aptly repo show <имя репозитория>, где <имя репозитория> - это имя репозитория, URL-адрес которого вы хотите проверить.

2. В выводе команды найдите строку, начинающуюся с URL:. Эта строка содержит URL-адрес репозитория.

Например, если вы хотите проверить URL-адрес репозитория с именем myrepo, выполните следующую команду:

aptly repo show myrepo


В выводе вы увидите информацию о репозитории, включая его URL-адрес:

Name: myrepo
Comment: My repository
Default Distribution: stable
URL: http://example.com/myrepo/


Обратите внимание, что URL-адрес может быть изменен путем выполнения команды aptly repo edit.



Команда "aptly publish switch" используется для переключения между двумя ранее опубликованными репозиториями в Aptly. Эта команда позволяет изменить символическую ссылку на текущий репозиторий, чтобы пользователи могли обновлять свои системы, используя новый репозиторий. 

Например, если у вас есть два репозитория, "repo-dev" и "repo-prod", и вы хотите переключиться с "repo-dev" на "repo-prod", вы можете использовать команду "aptly publish switch repo-prod repo-dev". Это изменит символическую ссылку на текущий репозиторий с "repo-dev" на "repo-prod".


