Теория о Докер файле 
image в докере это некий образ собраный из докер файла представляет из себя выполненые и запакованые в формат докера команды и ключевые слова
image обычно хроняться в централизованом хранилище, можно запустить неограниченное количество докеров из image на текщей машине огрничениме бут являться только ресурсы

Dockerfile файл
распространеные ключевые слова пишуться большими буквами, после чего идет параметр для этого ключевого слова

читаем с низу в верх

 \
/|\	Cлой 6: ENTRYPOINT (пишется команда при старте контейнера)
 |	Cлой 5: ADD (добавляем файлы приложения )

 \	Зависимости
/|\	Cлой 4:RUN (устанвока модули и библиотеки для приложения )
 |	Cлой 3:RUN (устанвока пакетов оs)

 \       Операциоонная система 
/|\	Cлой 2: RUN  (тут используются команды для настройки систем, дч установки дополнительних модулей и библеотек(обычно большие bash скрипты))
 |  	Cлой 1: FROM  debian:jessie (на этом этапе качаться базовый имедж, после на его основе внути него будет выполнять уже все отстальне команды указаныне в докер файле)
 
пример докер файла 
FROM python:3.6
RUN ln -snf /usr/share/zoneinfo/Europe/Moscow /etc/localtime && echo Europe/Moscow > /etc/timezone

RUN apt-get update -y && apt-get install -y curl
RUN pip install django

ADD . /app (.(откуда, текущая дериктория докер файла) /app(куда внути image будем добавлять файл))
ENTRYPOINT python /app/manage.py runserver 0.0.0.0:8000 --noreload (команда которая запускает нашь скрипт внутри контейнера)
открываем 8000 порт  0.0.0.0:8000 , иногда зыбают указать (не 127.0.0.1(будет слушать локолхость внути контейнера) нужно в докере указать 0.0.0.0(будет доступ))

после того как отредактировали Dockerfile необходимо собрать докер images
docker build . -t test:latest (.(место где находиться докер файл) -t(имя для докер файла ))

docker run -d -p 8000:8000 test
запускаю докер контейнер пробрасываю порты 8000 локалные на 8000 порты в докере 
curl 127.0.0.1:8000
увидим приветсвенное сообщение от приложения 

каждая деректива отдельный слой, все слои имеют рид онли формат, после выполнения уже не удасться записать в предыдущий слой 

	Cлой 6: ENTRYPOINT 
	Cлой 5: ADD expose 80 
	Cлой 4:RUN 
	Cлой 3:RUN
	Cлой 2: RUN
  	Cлой 1: FROM 
  	
OverlayFS - это файловая система, которая позволяет объединять несколько файловых систем в одну, создавая таким образом виртуальную файловую систему.
Она используется в Linux для создания контейнеров и виртуальных машин.
OverlayFS работает путем монтирования двух файловых систем в одну.
Она создает верхнюю файловую систему, которая содержит изменения, внесенные в файлы во время выполнения контейнера, и нижнюю файловую систему, которая содержит исходные файлы.
Все изменения, внесенные в файлы во время выполнения контейнера, сохраняются в верхней файловой системе, а исходные файлы остаются неизменными в нижней файловой системе.
OverlayFS позволяет создавать несколько контейнеров, используя одну и ту же базовую файловую систему, что позволяет экономить место на диске.
Она также обеспечивает быстрый доступ к файлам и позволяет создавать контейнеры с различными версиями приложений и библиотек.
OverlayFS является одним из наиболее популярных механизмов для создания контейнеров в Linux и используется в таких инструментах, как Docker и Kubernetes

=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
хорошие практики (уменьшение размера докер images )
1. .dockerignore (в этом файле указваются какие файлы при запуске контейнера из текущей деректории не выкачивать в сам докер images) например при выполнение add
СОЗДАЕМ файл .dockerignore и прсото перечилляем те папки и файлы которые не нужно копировать 
2. удаляем кеши (пердустановленых компанент) из /var/lib/apt/lists/*
3. обязательно делаем установку и удаление в одном шаге!!!
RUN set -ex && \                         
    apt-get update && \
    apt-get install -y nginx && \
    rm -rf /var/lib/apt/lists/* 
4. Порядок выполнения шагов (код нужно выполнять уже после устанвоки компонет и приложений, т.к. они храняться в кеше)
5. логи в stdout/stderr (настраиваем логи в stdout/stderr )
    RUN set -ex && \
    ln -sf /dev/stdout /var/log/nginx/access.log &&\
    ls -sf /dev/stderr /var/log/nginx/error.log
5.1 что бы посмотреть логи в докер кантейнере нужно выполнить 
   docker logs (имя докер контейнера)
6. различие между ADD COPY (COPY-просто копирует содержимое контейнре) (ADD-разорхевирует все содержимое), елси не знаем для чего нам нужено ADD всегда копируем через COPY
6.1 ENTRYPOINT CMD (CMD делаавет все тоже самое что и ENTRYPOIN, при запуске docker run считает данные из ENTRYPOIN(если там узаказано что стартуем службу, она старнет) если мы пропишим в dokerfile CMD то у нас есть вариант по запуску контейне просто в консоли баш без выполнения скрипта   )
    


собоираем images из debian:jessie
FROM debian:jessie   

запускаем apt-get update после этого устанавливаем nginx
RUN apt-get update && \
    apt-get install -y nginx

добавляем в дерикрторию /etc/nginx/ докера, все что находиться в текущей дериктории 
ADD . /etc/nginx/

параметр EXPOSE 80 обозначет что контейнер по умолчанию будет открывать 80 порт. ENTRYPOINT запускает nginx (опция 'daemon off;' запускает nginx в форграунде, )
EXPOSE 80
ENTRYPOINT nginx -g 'daemon off;'

!!!!!!!!!!!!!стало!!!!!!!!!!!!!

FROM debian:jessie   

RUN apt-get update && \
    apt-get install -y nginx
RUN rm -rf /var/lib/apt/lists/* (так отработает не корректно, из-за того что каждая деректива отдельный слой, все слои имеют рид онли формат, после выполнения уже не удасться записать в предыдущий слой )

ADD . /etc/nginx/

EXPOSE 80
ENTRYPOINT nginx -g 'daemon off;'

!!!!!!!!!!!!!стало!!!!!!!!!!!!!

FROM debian:jessie   

RUN set -ex && \                          (отбражает в консоли логи всех выполняемых команд )
    apt-get update && \
    apt-get install -y nginx && \
    rm -rf /var/lib/apt/lists/* 
RUN set -ex && \
    ln -sf /dev/stdout /var/log/nginx/access.log &&\
    ls -sf /dev/stderr /var/log/nginx/error.log

COPY . /etc/nginx/

EXPOSE 80
ENTRYPOINT nginx -g 'daemon off;'




Background- Это значит, что сервис работает как фоновая задача не требующая взаимодействия с пользователем.
Foreground- Это сервис, о котором пользователь осведомлен. Это достигается с помощью отображения нотификации в статус-баре.
Пример foreground сервиса – отображение нотификации при проигрывании музыки в приложении-плеере

=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
				 шпаргалка по соновным действиям с докером

	I.  Build 
Сборка образа из Dockerfile в текущей директории
docker build -t image_name:tag .

Изменение имени образа или тэга
docker tag old_image_name new_image_name

Сохранение образа в файл images.tar
docker save image_name -o image.tar

Загрузка образа из файла 
docker load -i image.tar



	II. Run
Что бы создать и запустить контейнер 
docker run image_name:tag

Полезные параметры для команды run 
-d - Запуск контейнера в фоне
-rm - Удаление контейнера после остановки

-p - проксирование локального порта в порт контейнера
-e - переменные окржения, передаваемые приложению
-v - Подключение вольюмов в контейнер
-ti - Инетерактивный режим (для запуска шела)



	III. List
Сиско всех запущеных контейнеров
docker ps 

Список всех контейнеров
docker ps -a

Все образы на сервере
docker images



	IV. Clean UP
Удаление всех образов неиспользуемых контейнеров 
docker image prune -a 

Удаление всех остановленых контейнеров
docker container prune -f

Остановка запущеного контенйнера
docker stop container_name
docker kill container_names



	V. Images
Скачать имадж
docker pull image_name:tag

Загрузка имеджа в registry
docker push image_name:tag

как сделать пуш images на 55.245 в local registry
для начала нужно сделать tag на 55.242
sudo docker tag ntjenkins:setup_LDAP 192.168.55.242:443/ntjenkins:setup_LDAP
после сделать push в local registry на 55.242
sudo docker push 192.168.55.242:443/ntjenkins:setup_LDAP
далее качаем образ на 55.245 из registry 55.242
sudo docker pull 192.168.55.242:443/ntjenkins:setup_LDAP
делаем tag на 55.245
sudo docker tag 192.168.55.242:443/ntjenkins:setup_LDAP 192.168.55.245:5000/ntjenkins:setup_LDAP
и после этого уже добавляем docker imaages в regestry на 55.245
sudo docker push 192.168.55.245:5000/ntjenkins:setup_LDAP

что бы проверить добаленые images, достаточно сдеалть ls на следующие каталоги:

показывает какиме есть имеджес
ls /var/lib/registry/docker/registry/v2/repositories

показывает какие есть tags имаджей 
ls /var/lib/registry/docker/registry/v2/repositories/busybox/_manifests/tags/



Просмотр команды в Имадже
docker history image_name:tag --no-trunc
192.168.55.245:5000/ntjenkins:pipline_for_packages


	VI. One-liners
Удаление всех контейнеров 
docker rm -f $(docker ps -qa)

Удаление неименованных образов 
docker rmi $(docker images -q -f danling=true)

Просмотр файла в контейере
docker exec container_name cat /etc/config.conf

Сначала нужно узнать идентификатор контейнера, который вы хотите открыть. Для этого выполните команду "docker ps", которая выведет список запущенных контейнеров. 
Затем, используя идентификатор контейнера, выполните команду "docker exec -it <идентификатор_контейнера> /bin/bash". Эта команда откроет интерактивную оболочку внутри контейнера, которую можно использовать для выполнения команд внутри контейнера.

sudo docker exec -it 636e66119c76 /bin/bash

=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                                        Идеалогия докер
1.(стандартизация)Контейнер, это про стандартизированую поставку, открытие и использование помещенного в докер обьекта (стандартизация)
*Сборка
*Поставка
*Конфигурация 
2.Воспроизводимость 
Все узависимости и код который был заложен на тк в имедж докера можно перенести на другие пространства
3. Консистентность
уверенсоть что в продакшен запустили то что уже проверили 

пример 
=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                                        Docker engine
что из себя представляет сам контейнер 
					  Container
					/     |       \
				Namespace     |  	      CGroup
                               /      \	      |	     /     \
			     /  \    /  \      | 	   /  \   /  \
		         Pid  Net  Mnt User     |	CPU  Mem I/O Net
		         		      |
		         		     CoW  		
2 ключиевые технолгие которые реализует собой контейнер это Namespace и CGroup
Namespace вшитая в ядро linux технология, механизм обеспечивающий изоляцию процессов друг от друга(Pid,Net,Mnt,User)
CGroup вшитая в ядро linux технология, механизм изолирующий вычислительные ресурсы процессов (CPU,Mem,I/O,Net)
CoW (Copy-on-Write)- при чтении области данных используется общая копия, в случае изменения данных - создается новая копия 

Namespace (NS) 
    * Pid NS
         -Процессы в Pid NS видят только процессы в том же NS
         -У каждого PID ns своя нумерация начинается с 1
	 -Когда завершается PID весь NS перестает существовать
    *Net NS(пространство имен в сети )
	 -Процессы в рамках своего net ns получают свое сетевое окружение
	    - Сетевые интерфейсы (в том числе lo)
	    - Таблицу маршрутизации
	    - Правила iptables
	    - Сокеты
	 - Veth 
	 - Общий lo для нескольких контейнеров
    *Mnt NS - при каждом запуске контейнера, он получает свою собственную файловую систему, если мы выйдем или удалим контейнер, данных которые записывал туда сарый контейнер не сохраниться 
    	- Процеесы может иметь свою root fs 
    	- /tmp
    	- /sys и /proc
    * User NS - (нужно следить за правами, при создании контейнера, елси создается под руутом то и у процеса будут права рута)
    	- Позволяет марить GiD/UiD
    	   - Можно смапить UiD 0 (root) в нерутовый UiD в хостовом NS
    	   
CGroup 
    - Управляет ресурсами для процесса
    - Добавляет overhead 
    	- или нет (если н нашей системе захотим ограничить по памяти, unix дложны считать количество выдаваемой памяти)
    -определение CPU ограничений должно поддердиваться седствами приложения 
    
Copy-on-Write
	-image (CoW) 

=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
					Storage drivers

  для ubuntu обычно использую AUFS
  
Storage driver в Docker - это механизм, который управляет хранением и управлением файлов в контейнерах Docker.
Storage driver определяет, как Docker хранит и управляет файлами в контейнерах Docker, включая файловую систему контейнера, образы Docker и тома данных.
Docker поддерживает несколько различных storage driver'ов, включая overlay2, aufs, devicemapper, btrfs и zfs.
Каждый storage driver имеет свои преимущества и недостатки, и выбор конкретного storage driver зависит от конкретных потребностей и требований.
Например, overlay2 является рекомендуемым storage driver'ом для большинства случаев использования Docker, так как он обеспечивает высокую производительность и надежность.
Однако, если вы используете Docker на старой версии ядра Linux, то вы можете использовать devicemapper в качестве storage driver'а.
В целом, storage driver в Docker является важным компонентом, который обеспечивает эффективное и надежное хранение и управление файлами в контейнерах Docker.  	   


Вы можете узнать, какой storage driver используется в Ubuntu, выполнив следующую команду в терминале:
sudo docker info | grep "Storage Driver"
Эта команда выводит информацию о Docker, включая используемый storage driver. Результат будет выглядеть примерно так:
Storage Driver: overlay2
В этом примере используется storage driver "overlay2".

для Ubuntu рекомендуется использовать Storage driver- AUFS 

=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
http://192.168.55.245/redmine/projects/support/wiki/Настройка_тестового_стенда_и_включение_в_Jenkins_при_необходимости
ибо подключить полный список необходимых репо либо переключиться на наши зеркала следующей командой:
wget -qO - http://192.168.55.245/nt-repo/nt-repo-switch-to-mirror.sh -e use_proxy=yes | sudo -E bash;

Поставить на тестовый стенд docker и python3 и добавить в группу docker пользователя g10
wget -qO - http://192.168.55.245/nt-repo-dev/nt-repo-dev-init.sh -e use_proxy=yes | sudo -E bash; \
sudo apt-get update; \
sudo apt-get install -y python3 python3-pip qemu binfmt-support qemu-user-static docker.io libconfig++-dev apt-show-versions; \
sudo pip3 install --proxy http://192.168.55.253:3128 robotframework robotframework-sshlibrary pexpect; \
sudo usermod -aG docker g10; \
sudo systemctl status docker

Выкачать архив с мультиархитектурными образами
sudo mkdir -p /etc/systemd/system/docker.service.d; \
echo -en '[Service]\nEnvironment="HTTP_PROXY=http://192.168.55.253:3128/"\nEnvironment="HTTPS_PROXY=http://192.168.55.253:3128/"\n' | sudo tee /etc/systemd/system/docker.service.d/http-proxy.conf; \
sudo systemctl daemon-reload; \
sudo systemctl restart docker;

docker run --rm --privileged multiarch/qemu-user-static --reset -p yes --credential yes

sudo rm -rf /etc/systemd/system/docker.service.d; \
sudo systemctl daemon-reload; \
sudo systemctl restart docker;

Править /etc/fstab
grep 'errors=remount-ro,suid' /etc/fstab || sudo sed -i 's|errors=remount-ro|errors=remount-ro,suid|' /etc/fstab

Добавить сертификаты для работы докера
openssl s_client -showcerts -connect 192.168.55.242:443 < /dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > ca.crt; sudo mv ca.crt /usr/local/share/ca-certificates/;sudo update-ca-certificates;sudo systemctl restart docker.service;

Исправляет следующую ошибку:
Error response from daemon: Get https://192.168.55.242:443/v2/: x509: certificate signed by unknown authority

=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
првоерить какие образы докера присутствуют 
docker images
sudo docker images
REPOSITORY                              TAG        IMAGE ID       CREATED         SIZE
192.168.55.242:443/metrics/ubuntu2204   1.1.10-4   d6236fde91cd   5 weeks ago     1.19GB
192.168.55.242:443/metrics/ubuntu1804   latest     b7e82467bd83   15 months ago   773MB

показывает что стартует
docker ps
sudo docker ps -a

CONTAINER ID   IMAGE                                   COMMAND                  CREATED        STATUS                  PORTS                                                                                                                                                                                                   NAMES
2c3f5aa5ede9   192.168.55.242:443/metrics/ubuntu1804   "/bin/bash -c 'sourc…"   6 months ago   Up Less than a second   0.0.0.0:2003->2003/tcp, :::2003->2003/tcp, 0.0.0.0:2023-2024->2023-2024/tcp, :::2023-2024->2023-2024/tcp, 127.0.0.1:8081->80/tcp, 0.0.0.0:29161->161/udp, :::29161->161/udp, 127.0.0.1:8082->3000/tcp   ntmetrics

Стопай сервис,
sudo systemctl restart docker
sudo systemctl status docker

Потом docker rm 07b37d7cfe4d
Потом docker rmi на 18 образ
Потом старт сервису

sudo systemctl stop docker
Warning: Stopping docker.service, but it can still be activated by:
  docker.socket
  Не докер, сервис метрик

удаляет образ докера с диска  
sudo docker rm 2c3f5aa5ede9

удаляет принудительно 
sudo docker rmi b7e82467bd83 -f 
 
g10@ns3-01.573.gprs.arkhangelsk.komi.pskov.mts:~$ docker images -a |  grep ubuntu1804 
192.168.55.242:443/metrics/ubuntu1804   latest     b7e82467bd83   15 months ago   773MB

docker rmi  192.168.55.242:443/metrics/ubuntu1804 
так ?

Можно хеш он в строке по docker images


docker rmi  192.168.55.242:443/metrics/ubuntu1804 






=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

запускаем докер 
docker run -it --rm --shm-size=10g --privileged --cap-add=ALL 192.168.55.242:443/18.04_amd64_git /bin/bash


так же есть скрипт запука ima
run_docker_container.sh


=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
пробрасываем порт в докер 
docker run -d -p 8080:80 ngnix:1.13
-d обзначает, что запускаем контейнер в бекграунд режиме (т.е в фоне)
-p обозначает что локальный порт 8080 пробрасываем на 80 порт самого контейнера

проверка 
curl 127.0.0.1:8080 -i 

показывает информацию об ngnix


=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

при запуске docker контейнера и включение атрибута -v создает в контейнере общую папку путь до локальной дерикории/путь до сощдоваемой дериктории в докер контейнере 

docker run --privileged --rm -it --shm-size=10g --cap-add=ALL -v /home/esermyagin/Desktop/123/script/Jenkins:/home/g10/serm 

атрибут -w указывает с какой дериктории стартовать
-w /home/g10/serm 

указав -h при запуске скрипта 
./run_docker_container.sh -h


при указании атрибута --name можно назначить имя докеру 
--name=test_jen



=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
посмотреть логи запущеного контейнера 

sudo docker logs gifted_bouman


где gifted_bouman имя контейнера 
=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

можно перенаправить исполнение команды в докере с помощью exec 
имя контейнера gifted_bouman

sudo docker exec gifted_bouman cat /etc/nginx/conf.d/default.conf

=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
как в дженкинсе посмотреть на каком docker запускается билд на примере ntlog

переходим 
http://192.168.55.242:8080/job/ntlog/

далее слева в разделе build history выбираем build master

откроется 
http://192.168.55.242:8080/job/ntlog/263/
далее выбираем console Output
слева от времяни пишется в каком докере выпонялся тест 
пример
[ubuntu 20.04 amd64 generic]

 docker images
REPOSITORY                           TAG       IMAGE ID       CREATED         SIZE
192.168.55.242:443/18.04_arm64       latest    bde294ac3cb8   11 days ago     1.43GB
192.168.55.242:443/20.04_arm64       latest    421dc6b21862   11 days ago     1.47GB
192.168.55.242:443/18.04_amd64       latest    5597607ef0f0   11 days ago     1.6GB
192.168.55.242:443/20.04_amd64_git   latest    040e74dacb1b   11 days ago     1.71GB
192.168.55.242:443/20.04_amd64       latest    6cb02acee5c3   11 days ago     1.66GB = [ubuntu 20.04 amd64 generic]
192.168.55.242:443/20.04_armhf       latest    f78847d6a322   6 weeks ago     1.19GB
192.168.55.242:443/18.04_armhf       latest    b382a350b934   5 months ago    1.1GB
hello-world                          latest    feb5d9fea6a5   18 months ago   13.3kB
=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

скрипт ./pull_docker_images.sh выкачивает доступные докеры

=> docker pull 192.168.55.242:443/20.04_amd64:latest
latest: Pulling from 20.04_amd64
df6635ed1257: Already exists 
43d161606acf: Already exists 
d68fb55daf36: Already exists 
f389d5f4af9c: Already exists 
6cf27705cbcd: Already exists 
d46bf32ae2a7: Already exists 
1d16e40c352d: Already exists 
62901d4552d4: Already exists 
f2fab8de63a7: Already exists 
0aa1664a5e4d: Already exists 
63fad9e2ee51: Already exists 
4799d06aa649: Already exists 
dae60ca4075c: Already exists 
50522ab9f626: Already exists 
5597946983a5: Already exists 
dbcbf3ae6d93: Already exists 
6397b24ebf3e: Already exists 
debbd728568f: Already exists 
b66433727cfa: Already exists 
181c45b52e18: Already exists 
71b6cf89f168: Already exists 
Digest: sha256:d43db81f97880c4ff9144ba06db8f3049bc700939fa2866f1030c5cf98e01387
Status: Downloaded newer image for 192.168.55.242:443/20.04_amd64:latest
192.168.55.242:443/20.04_amd64:latest


=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

 ./exec_docker_container.sh
показывает к каким докерам можно подключиться 
Select a number container to exec to it
1: 2e7ccefbce5e   192.168.55.242:443/20.04_amd64_git   "/bin/bash"   2 hours ago   Up 2 hours             cool_gates
> 
необходимо указать номер докера 

=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

docker network create --subnet 172.17.1.0/24 --gateway=172.17.1.1 --ip-range 172.17.1.0/24 --driver=bridge --label=ntpipe_test ntpipe_test
docker run --rm -it -v /home/g10/asolomina/test_nt-pipe/tests/writer_reader_shm:/writer_reader_shm --name node1_nt-pipe --network ntpipe_test --ip=172.17.1.2 -w /writer_reader_shm ubuntu1804_nt-pipe_new
docker run --rm -it -v /home/g10/asolomina/test_nt-pipe/tests/writer_reader_shm:/writer_reader_shm --name node2_nt-pipe --network ntpipe_test --ip=172.17.1.3 -w /writer_reader_shm ubuntu1804_nt-pipe_new



=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
смена docker tag и имени 

docker tag <image_name> <new_image_name>:latest

udo docker tag ntjenkins0.2:lts-jdk11 ntjenkins:setup_MAIL



=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 
 изменения в нем можно будет пулить в докер и комментировать
ну и переносить между машинами, ломать, пробовать и все такое 
 
Docker commit - это команда Docker, которая позволяет создавать новый образ Docker на основе измененного контейнера Docker. Команда Docker commit создает новый образ Docker, который содержит все изменения, внесенные в контейнер Docker после его запуска.

Когда вы запускаете контейнер Docker, вы можете вносить изменения в его файловую систему, устанавливать новые пакеты, настраивать приложения и т.д. Когда вы готовы сохранить эти изменения в новый образ Docker, вы можете использовать команду Docker commit.

Команда Docker commit принимает два аргумента: идентификатор контейнера Docker и имя нового образа Docker. Например, вы можете выполнить команду
 docker commit <CONTAINER_ID> my-new-image, 
 где <CONTAINER_ID> - это идентификатор контейнера Docker, а my-new-image - это имя нового образа Docker.
 
 sudo docker commit 636e66119c76 initial_setup_with_ru_localizationjenkins


После выполнения команды Docker commit будет создан новый образ Docker, который содержит все изменения, внесенные в контейнер Docker после его запуска. Этот новый образ Docker можно использовать для запуска новых контейнеров Docker, которые будут содержать все изменения, внесенные в исходный контейнер Docker.

Важно отметить, что команда Docker commit не является рекомендуемым способом управления конфигурацией и версионирования приложений в Docker. Вместо этого рекомендуется использовать инструменты управления конфигурацией, такие как Ansible, Chef или Puppet, а также системы контроля версий, такие как Git, для управления конфигурацией и версионирования приложений в Docker.



Команда sudo docker commit используется для создания нового образа Docker на основе изменений, внесенных в существующий контейнер Docker. 

В данном случае, команда создает новый образ Docker на основе контейнера с идентификатором 636e66119c76, а затем называет его initial_setup_with_ru_localization и присваивает ему тег sha256:77b58603dc95d07b76b1bba7eb999c4b058f117cf2e6cb0334746882bfd5db91.

Чтобы использовать этот новый образ, вы можете запустить его с помощью команды docker run и указать его имя и тег:

docker run -it initial_setup_with_ru_localization:sha256:77b58603dc95d07b76b1bba7eb999c4b058f117cf2e6cb0334746882bfd5db91

Эта команда запустит новый контейнер на основе созданного образа и откроет интерактивную оболочку внутри контейнера.



=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

docker run --name ru_docker_jenkins --restart=on-failure --detach \
  --network jenkins_ru_localization --env DOCKER_HOST=tcp://docker:7777 \
  --volume jenkins-data:/var/jenkins_home \
  --volume jenkins-docker-certs:/certs/client:ro \
  --publish 9080:9080 --publish 59999:59999 initial_setup_with_ru_localization


опиши что тут происходит 
docker run --name myjenkins --restart=on-failure --detach \
  --network jenkins --env DOCKER_HOST=tcp://docker:2376 \
  --volume jenkins-data:/var/jenkins_home \
  --volume jenkins-docker-certs:/certs/client:ro \
  --publish 8080:8080 --publish 50000:50000 jenkins
Эта команда запускает контейнер Docker с образом Jenkins и настраивает его для работы в сети jenkins. Разберем каждую опцию по порядку:

- --name myjenkins - задает имя контейнера, в данном случае myjenkins.
- --restart=on-failure - определяет, как контейнер будет перезапускаться в случае сбоя. В данном случае, контейнер будет перезапущен только в случае ошибки.
- --detach - запускает контейнер в фоновом режиме.
- --network jenkins - подключает контейнер к сети jenkins.
- --env DOCKER_HOST=tcp://docker:2376 - устанавливает переменную окружения DOCKER_HOST в значение tcp://docker:2376. Это позволяет контейнеру обращаться к Docker-демону, работающему на хост-машине.
- --volume jenkins-data:/var/jenkins_home - монтирует том jenkins-data в директорию /var/jenkins_home внутри контейнера. Это позволяет сохранять данные Jenkins между запусками контейнера.
- --volume jenkins-docker-certs:/certs/client:ro - монтирует том jenkins-docker-certs в директорию /certs/client внутри контейнера в режиме "только для чтения" (ro). Это позволяет контейнеру использовать сертификаты клиента Docker для безопасного подключения к Docker-демону.
- --publish 8080:8080 - открывает порт 8080 в контейнере и привязывает его к порту 8080 на хост-машине. Это позволяет получить доступ к веб-интерфейсу Jenkins через браузер на хост-машине.
- --publish 50000:50000 - открывает порт 50000 в контейнере и привязывает его к порту 50000 на хост-машине. Это позволяет настраивать удаленные агенты Jenkins для выполнения сборок на хост-машине.
Имя Docker-образа указывается в конце команды docker run, после параметра --publish. В данном случае, имя образа - jenkins. 
Команда docker run используется для запуска Docker-контейнера на основе Docker-образа. Параметр --name задает имя контейнера, --restart определяет, как контейнер будет перезапускаться в случае сбоя, --detach запускает контейнер в фоновом режиме.
Параметр --network указывает, какую сеть использовать для контейнера. --env задает переменную окружения, которая будет доступна внутри контейнера. --volume монтирует тома в контейнере, --publish открывает порты на хосте и направляет их на контейнер.
Таким образом, команда запускает контейнер на основе образа jenkins, называет его myjenkins, задает параметры перезапуска и сети, монтирует тома и открывает порты.


В итоге, эта команда запускает контейнер Jenkins с настройками, необходимыми для его работы в сети jenkins и обеспечивает доступ к веб-интерфейсу Jenkins через браузер на хост-машине.
что делает docker network create jenkins?
Команда docker network create jenkins создает новую сеть Docker с именем "jenkins". Это позволяет контейнерам, запущенным в этой сети, общаться друг с другом по именам контейнеров вместо IP-адресов. Это может быть полезно, когда необходимо запустить несколько контейнеров, которые должны взаимодействовать друг с другом в рамках одной сети.


=-=-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

sudo docker run --privileged --rm -it --shm-size=10g --cap-add=ALL -e gatz=$gatz -v /home/esermyagin/Desktop/123/script/Jenkins:/home/g10/serm  -w /home/g10/serm 192.168.55.242:443/20.04_amd64_git ./checking_the_installing_components


В представленном коде происходит запуск Docker-контейнера с использованием команды docker run. Давайте разберемся, что здесь происходит:

1. sudo - это команда, используемая для выполнения следующей команды с правами суперпользователя.

2. docker run - это команда Docker CLI для создания и запуска Docker контейнера.

3. --privileged - это опция, которая предоставляет контейнеру полные привилегии, позволяющие выполнять привилегированные операции на хостовой машине.

4. --rm - это опция, которая указывает Docker удалить контейнер после его остановки.

5. -it - это опция, которая создает интерактивный терминал и подключает его к контейнеру, позволяя взаимодействовать с ним из командной строки.

6. --shm-size=10g - это опция, которая устанавливает размер разделяемой памяти (shared memory) для контейнера. В данном случае, размер установлен на 10 гигабайт.

7. --cap-add=ALL - это опция, которая добавляет все возможные привилегии (capabilities) в контейнер, позволяя выполнять привилегированные операции.

8. -e gatz=$gatz - это опция, которая задает environment variable (переменную окружения) gatz в контейнере и присваивает ей значение из переменной $gatz.

9. -v /home/esermyagin/Desktop/123/script/Jenkins:/home/g10/serm - это опция, которая монтирует локальную директорию /home/esermyagin/Desktop/123/script/Jenkins на путь /home/g10/serm внутри контейнера. Это позволяет доступиться к файлам и директориям извне контейнера.

10. -w /home/g10/serm - это опция, которая устанавливает рабочий каталог (working directory) внутри контейнера в /home/g10/serm. Это означает, что все команды будут выполняться в этом каталоге.

11. 192.168.55.242:443/20.04_amd64_git - это имя Docker образа, который будет использован для создания контейнера.

12. ./checking_the_installing_components - это команда, которая будет выполнена внутри контейнера.

Таким образом, весь этот код используется для создания и запуска Docker контейнера с определенными настройками и параметрами, включая монтирование директории, задание переменной окружения и выполнение команды внутри контейнера.



